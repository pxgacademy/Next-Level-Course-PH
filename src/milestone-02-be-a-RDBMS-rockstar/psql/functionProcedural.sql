
/*
                    @Procedural Approach:
    1. Language Support: Supports procedural languages like PL/pgSQL, PL/Perl, PL/Python, etc.
    2. Complex Logic: Allows for complex logic using control structures like loops, conditionals, and exception handling.
    3. Variable Support: Supports variable declarations and manipulation within the procedural code.
    4. Stored Procedures/Functions: Provides the ability to create stored procedures or functions, 

                    @Non-Procedural Approach:
    1. Declarative Queries: Focuses on writing declarative SQL queries to retrieve, insert, update, or delete data from the database.
    2. Simplicity: Emphasizes simplicity by expressing operations in terms of what data is needed.
    3. SQL Functions: Supports SQL functions, which are single SQL statements that return a value or set of values.
    4. Performance: Can sometimes offer better performance for simple operations due to the optimized query execution plans generated by the database engine.
*/



SELECT COUNT(*) FROM employees;


-- CREATE OR REPLACE FUNCTION emp_count()
CREATE FUNCTION emp_count()
RETURNS INT
LANGUAGE SQL
AS
$$
    SELECT COUNT(*) FROM employees;
$$;

SELECT emp_count();


CREATE OR REPLACE FUNCTION delete_row()
RETURNS void
LANGUAGE SQL
AS
$$
    DELETE FROM employees WHERE employee_id = 30;
$$;

SELECT delete_row();



-- function
CREATE OR REPLACE FUNCTION delete_row(p_emp_id INT) RETURNS void LANGUAGE SQL AS
$$
    DELETE FROM employees WHERE employee_id = p_emp_id;
$$;

SELECT delete_row(30);

-- procedure
CREATE OR REPLACE PROCEDURE remove_emp() LANGUAGE PLPGSQL AS
$$
    -- variable
    DECLARE
    test_var INT;

    -- function starts from here
    BEGIN
        SELECT employee_id INTO test_var FROM employees WHERE employee_id = 28;
        DELETE FROM employees WHERE employee_id = test_var; 
    END
$$;

CALL remove_emp();


CREATE OR REPLACE PROCEDURE remove_emp_param(p_emp_id INT) LANGUAGE PLPGSQL AS
$$
    -- variable
    DECLARE
    test_var INT;

    -- function starts from here
    BEGIN
        SELECT employee_id INTO test_var FROM employees WHERE employee_id = p_emp_id;
        DELETE FROM employees WHERE employee_id = test_var;

        RAISE NOTICE 'Employee removed successfully!';
    END
$$;

CALL remove_emp_param(26);


SELECT * FROM employees;